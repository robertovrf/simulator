// HTTPGETLB - Load balancer class B
//
// Processes a forwards a HTTPGET request to other servers
//
// Author: Roberto Rodrigues Filho
// February @ 2019

const char debugMSG[] = "[@HTTPGETLB]"

component provides http.handler.GET.HTTPGET, remote.Remote requires io.Output out, data.IntUtil iu, 
	http.util.HTTPUtil httpUtil, data.StringUtil strUtil, net.TCPSocket {

	//static ProxyInfo infos[] = new ProxyInfo[](new ProxyInfo("scc-mc1.lancs.ac.uk", 2012))
	static ProxyInfo infos[]
	static int pointer = 0
	static Mutex requestControl = new Mutex()

	implementation Remote {
		void Remote:setAddresses(ProxyInfo newInfos[]) {
			infos = newInfos
		}
	}

	implementation HTTPGET {
		void HTTPGET:handleRequest(HTTPMessage httpHeader) {
			TCPSocket server = new TCPSocket()
			mutex(requestControl) {
				//out.println("$(debugMSG) $(infos[pointer].address) - $(iu.intToString(infos[pointer].port))")
				if (!server.connect(infos[pointer].address, infos[pointer].port)) {
					char errorMsg[] = new char[]("$(debugMSG) ERROR! Fails to connect",
					" to $(infos[pointer].address) - $(iu.intToString(infos[pointer].port))")
					out.println(errorMsg)
					return
				}
				pointer++
				if (pointer == infos.arrayLength) { pointer = 0 }
			}
			server.send(httpHeader.rawHeader)
			HTTPMessage httpMessage = null
			if (httpHeader.command == "POST") {
				httpMessage = httpUtil.getMessage(httpHeader)
				server.send(httpMessage.postData)
			}
			sendResponse(httpHeader.socket, server)
			server.disconnect()
		}

		void sendResponse(TCPSocket client, TCPSocket server) {
			byte buf[] = null
			//NOTE: only works because the WS will close connection everytime
			// that means this implementation does not do keep alive
			while ((buf = server.recv(HTTPUtil.BUFF_SIZE)).arrayLength > 0) { client.send(buf) }
		}
	}
}
