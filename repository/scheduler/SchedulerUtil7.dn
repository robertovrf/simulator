const char debugMSG[] = "[@SchedulerUtil]"

uses data.String

//external_references.autogen.ERChecker 
//, external_references.autogen.ER:http eRefs {
component provides scheduler.SchedulerUtil requires io.Output out, data.IntUtil iu, io.FileSystem fileSystem {

	implementation SchedulerUtil {
		ServerInfo serverInfo[]
		bool started = false
		// read from the config file and 

		/*
			data ServerInfo {
				char ip[]
				int port
				char name[]
			}
		*/
		void setup() {
			if (!started) {
				serverInfo = new ServerInfo[7]()
				serverInfo[0] = new ServerInfo()
				serverInfo[0].ip 	= "scc-mc2.lancs.ac.uk"
				serverInfo[0].port	= 2012
				serverInfo[0].name 	= "mc2"
				serverInfo[1] = new ServerInfo()
				serverInfo[1].ip 	= "scc-mc3.lancs.ac.uk"
				serverInfo[1].port	= 2012
				serverInfo[1].name 	= "mc3"
				serverInfo[2] = new ServerInfo()
				serverInfo[2].ip 	= "scc-mc4.lancs.ac.uk"
				serverInfo[2].port	= 2012
				serverInfo[2].name 	= "mc4"
				serverInfo[3] = new ServerInfo()
				serverInfo[3].ip 	= "scc-mc5.lancs.ac.uk"
				serverInfo[3].port	= 2012
				serverInfo[3].name 	= "mc5"
				serverInfo[4] = new ServerInfo()
				serverInfo[4].ip 	= "scc-mc6.lancs.ac.uk"
				serverInfo[4].port	= 2012
				serverInfo[4].name 	= "mc6"
				serverInfo[5] = new ServerInfo()
				serverInfo[5].ip 	= "scc-mc7.lancs.ac.uk"
				serverInfo[5].port	= 2012
				serverInfo[5].name 	= "mc7"
				serverInfo[6] = new ServerInfo()
				serverInfo[6].ip 	= "scc-mc8.lancs.ac.uk"
				serverInfo[6].port	= 2012
				serverInfo[6].name 	= "mc8"
				started = true
			}
		}

		int SchedulerUtil:getNumServers() {
			setup()
			if (serverInfo != null) { return serverInfo.arrayLength }
			return 0
		}

		ServerInfo SchedulerUtil:getServer(int index) {
			setup()
			if (serverInfo == null) { return null }
			if (index >= serverInfo.arrayLength) {
				out.println(new char[]("$(debugMSG) Error: requested a server",
					" index that does not exist (index = $(iu.intToString(index)))"))
				return null
			}
			return serverInfo[index]
		}
	}
}
