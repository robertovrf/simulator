// Cache-Based Scheduler - CBS
data ServerMap {
	ServerInfo sI
	char resource[]
}

const char debugMSG[] = "[@CBS]"
const int SM_SIZE = 100

component provides scheduler.Scheduler requires io.Output out, data.IntUtil iu, scheduler.SchedulerUtil scdUtil, net.TCPSocket {

	ServerMap serverMap[] = null
	int numServers = 0
	// server index -- points to a server
	int sIndex = 0
	// server map index -- points to the last position at server map which has something
	int smMaxIndex = 0
	// server map index -- points to the last position inserted
	int smIndex = 0

	TCPSocket Scheduler:getServer(HTTPMessage httpMsg) {
		if (numServers == 0) { numServers = scdUtil.getNumServers() }
		TCPSocket server
		if (numServers == 0) { return null }
		else {
			ServerInfo sI = getServerFor(httpMsg.resource)
			if (sI == null) {
				sI = scdUtil.getServer(sIndex)
				addToServerMap(sI, httpMsg.resource)
				sIndex++
				if (sIndex == numServers) { sIndex = 0 }
			}
			server = new TCPSocket()
			if (!server.connect(sI.ip, sI.port)) {
				out.println("$(debugMSG) ERROR! Fails to connect to $(sI.ip) - $(iu.intToString(sI.port))")
				return null
			}
		}
		return server
	}

	void addToServerMap(ServerInfo sI, char resource[]) {
		// this shouldn't be necessary
		if (serverMap == null) { startServerMap() }
		serverMap[smIndex].sI = sI
		serverMap[smIndex].resource = resource
		smIndex++
		if (smIndex == SM_SIZE) { smIndex = 0 }
		if (smMaxIndex < SM_SIZE) { smMaxIndex++ }
	}

	ServerInfo getServerFor(char resource[]) {
		if (serverMap == null) { startServerMap() }
		for (int i = 0; i < smMaxIndex; i++) {
			if (serverMap[i].resource == resource) { return serverMap[i].sI	}
		}
		return null
	}

	void startServerMap() {
		serverMap = new ServerMap[SM_SIZE*numServers]
		for (int i = 0; i < (SM_SIZE*numServers); i++) {
			serverMap[i] = new ServerMap()
		}
	}
}
