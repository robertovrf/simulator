// Breadth Exploration
//
// This component implements the Exploration module, searching for the optimal configuration by performing a breadth search.
// 
// Author: Roberto Rodrigues Filho
// March @ 2017

const char debugMSG[] = "[@BExploration]"

data Bindings {
	String bindings[]
}

data Set {
	char config[]
}

data ConfigVerifyList {
	char expConfig[]
	int pointerInConfigList
}

component provides learning.Exploration requires io.Output out, data.IntUtil iu, util.DescriptionHandler dh, data.StringUtil strUtil {

	String configList[] 	 			= null
	ConfigVerifyList expandedConfigs[]  = null// the configs positions in expandedConfigs match configs
	ConfigVerifyList staticExpConfigs[]	= null
	// in the end this will have all bindings contained in the optimal config -- it'll match perfectly with a specific config desc.
	Bindings list[] 		 			= null
	String round[] 			 			= null// list of components that will to create the next round
	// this round will hold all components that won in the previous round
	// also if round is == null this means that the search will start from the very first round in the very first level
	Set set[] 				 			= null// set of configs that will be tested
	// it is important to notice that the set[pointer].config will match the list[pointer].bindings
	int setPointer 			 			= 0
	String winningArch[]	 			= null // keep a list of bindings for the winning architecture

	Exploration:Exploration(String configs[], String ips[]) {
		configList = configs
		//out.println("$(debugMSG) ExpandedConfigs started!")
		out.println("$(debugMSG) Preparing configurations for the functionality-search algorithm. Please wait...")
		staticExpConfigs = expandsConfigs(configs)
		out.println("$(debugMSG) Configurations prepared!")
		//out.println("$(debugMSG) ExpandedConfigs done!")
	}

	// TODO: is this right for the new version?
	char[] Exploration:restart() {
		round 			= null
		list 			= null
		winningArch		= null
		copyExpandedConfigs()
		loadSet()
		return set[setPointer].config
	}

	void copyExpandedConfigs() {
		expandedConfigs = null
		for (int pointer = 0; pointer < staticExpConfigs.arrayLength; pointer++) {
			expandedConfigs = new ConfigVerifyList[](expandedConfigs, new ConfigVerifyList(staticExpConfigs[pointer].expConfig,
			 staticExpConfigs[pointer].pointerInConfigList))
		}
	}

	char[] Exploration:getNext() {
		if (setPointer == INT_MAX) { setPointer = 0 } 
		else { setPointer++ }
		if (setPointer == set.arrayLength) { setPointer = 0 }
		return set[setPointer].config
	}

	bool Exploration:visitedAllConfigs() {
		if ((setPointer+1) == set.arrayLength) { return true }
		return false
	}

	void Exploration:latestCycleResult(char result[]) {
		for (int pointer = 0; pointer < set.arrayLength; pointer++) {
			if (set[pointer].config == result) {
				round = null
				for (int bindPointer; bindPointer < list[pointer].bindings.arrayLength; bindPointer++) {
					winningArch = new String[](winningArch, new String(list[pointer].bindings[bindPointer].string))
					round = new String[](round, new String(list[pointer].bindings[bindPointer].string))
				}
				round = getNextRound()
				filterExpConfigs()
				//out.println("$(debugMSG) Printing next round!")
				//print(round)
				//out.println("$(debugMSG) Printing winning arch!")
				//print(winningArch)
				loadSet()
				setPointer = INT_MAX // meaning that next time getNext gets called, setPointer should start from 0, instead of 1
				return
			}
		}
		throw new Exception ("Latest cycle result is invalid.")
	}

	// this function will filter according to the winningArch list
	void filterExpConfigs() {
		if (winningArch.arrayLength == 0) { return /* don't do anything */ }
		ConfigVerifyList result[] = null
		for (int configPointer = 0; configPointer < expandedConfigs.arrayLength; configPointer++)   {
			String configBindings[] = strUtil.explode(expandedConfigs[configPointer].expConfig, ",")
			bool match = true
			for (int winningPointer = 0; winningPointer < winningArch.arrayLength; winningPointer++) {
				if (!isStrInList(winningArch[winningPointer].string, configBindings)) {
					match = false
					break
				}
			}
			if (match) {result = new ConfigVerifyList[](result, expandedConfigs[configPointer])}
		}
		expandedConfigs = result
	}

	// based on the winning round
	String[] getNextRound() {
		if (round.arrayLength == 0) { throw new Exception ("Invalid round") }
		String result[] = null
		String helper[] = clone round
		round = null
		for (int roundPointer = 0; roundPointer < helper.arrayLength; roundPointer++) {
			String helper2[] = strUtil.explode(helper[roundPointer].string, ":")
			//out.println("$(debugMSG) Printing helper2:")
			//print(helper2)
			char strToBeAdded[] = new char[](helper2[2].string, ":")
			//out.println("$(debugMSG) HERE -- $(strToBeAdded)")
			if (!isStrInList(strToBeAdded, result)) { result = new String[](result, new String(strToBeAdded)) }
		}
		return result
	}

	// NOTE: this is not a very scalable way of verifying if this is the latest cycle... but it was the best way I could think of
	bool Exploration:isLastCycle() {
		if (expandedConfigs.arrayLength == 1) { return true }
		return false
	}

	ConfigVerifyList[] expandsConfigs(String configs[]) {
		ConfigVerifyList result[] = new ConfigVerifyList[configList.arrayLength]()
		for (int pointer = 0; pointer < configList.arrayLength; pointer++) {
			result[pointer] = new ConfigVerifyList(dh.decompress(configList[pointer].string), pointer)
		}
		return result
	}

	// considering that the very first component in all configs has to be the same and it has to be the root component.
	// otherwise, it is considered that the list of configs has configs from two different emergent systems
	char[] getRoot() {
		if (configList.arrayLength == 0) { throw new Exception ("This function can't execute with an empty list of configs.") }
		char root[] = null
		for (int compPointer = 0; compPointer < configList.arrayLength; compPointer++) {
			String helper[] = strUtil.explode(configList[compPointer].string, "|")
			helper = strUtil.explode(helper[0].string, ",")
			if (root.arrayLength == 0) { root = helper[0].string }
			else { if (root != helper[0].string) { throw new Exception ("Invalid list of configs.") } }
		}
		return root
	}

	// the previous level thingy is a list of components that was selected in the last level
	// TODO: is this the right name though? -- instead of level, maybe it's better to call it round?
	void loadList() {
		// condition to restart the search from scratch (compsLevel.arrayLength == 0);
		if (round.arrayLength == 0) { round = new String[](new String(new char[](getRoot(), ":"))) }
		//out.println("$(debugMSG) Printing round in the loadList function")
		//print(round)
		for (int configPointer = 0; configPointer < expandedConfigs.arrayLength; configPointer++) {
			String bindings[] = getBindings(expandedConfigs[configPointer].expConfig, round)
			if ((bindings.arrayLength > 0) && (!isBindingsInList(bindings))) { 
				//out.println("$(debugMSG) adding to list")
				//print(bindings)
				list = new Bindings[](list, new Bindings(bindings))
			}
		}
	}

	// every round set gets repopulated...
	void loadSet() {
		set = null
		list = null
		setPointer = 0
		loadList()
		while (list.arrayLength == 1) {
			/* --- start-debug --- */
			/*out.println("$(debugMSG) Printing list 1...")
			for (int listPointer = 0; listPointer < list.arrayLength; listPointer++) {
				print(list[listPointer].bindings)
				out.println("---")
			}*/
			/* --- end-debug --- */
			round = null
			for (int bindPointer = 0; bindPointer < list[0].bindings.arrayLength; bindPointer++) {
				winningArch = new String[](winningArch, new String(list[0].bindings[bindPointer].string))
				round = new String[](round, new String(list[0].bindings[bindPointer].string))
			}
			//out.println("$(debugMSG) Printing round HERE...")
			//print(round)
			list = null
			round = getNextRound()
			loadList()
		}
		if (list.arrayLength > 0) {
			/* --- start-debug --- */
			/*out.println("$(debugMSG) Printing list 2...")
			for (int listPointer = 0; listPointer < list.arrayLength; listPointer++) {
				print(list[listPointer].bindings)
				out.println("---")
			}*/
			/* --- end-debug --- */
			for (int listPointer = 0; listPointer < list.arrayLength; listPointer++) {
				set = new Set[](set, new Set(getConfig(list[listPointer].bindings)))
			}
		} else if (list.arrayLength == 0) {
			filterExpConfigs()
			for (int configPointer = 0; configPointer < expandedConfigs.arrayLength; configPointer++) {
				set = new Set[](set, new Set(configList[expandedConfigs[configPointer].pointerInConfigList].string))
			}
		}
	}

	void print(String strList[]) {
		for (int pointer = 0; pointer < strList.arrayLength; pointer++) {
			out.println("$(debugMSG) -- $(strList[pointer].string)")
		}
	}

	String[] getBindings(char expConfig[], String input[]) {
		String result[] = null
		String configBindings[] = strUtil.explode(expConfig, ",")
		for (int bindPointer = 0; bindPointer < configBindings.arrayLength; bindPointer++) {
			for (int inputPointer = 0; inputPointer < input.arrayLength; inputPointer++) {
				if (strUtil.find(configBindings[bindPointer].string, input[inputPointer].string) != StringUtil.NOT_FOUND) {
					result = new String[](result, new String(configBindings[bindPointer].string))
				}
			}
		}
		return result
	}

	// getConfig and isBindingInList look very much alike... 
	char[] getConfig(String bindings[]) {
		for (int configPointer = 0; configPointer < expandedConfigs.arrayLength; configPointer++) {
			String expConfBindings[] = strUtil.explode(expandedConfigs[configPointer].expConfig, ",")
			bool match = true
			for (int bindPointer = 0; bindPointer < bindings.arrayLength; bindPointer++) {
				if (!isStrInList(bindings[bindPointer].string, expConfBindings)) {
					match = false
					break
				}
			}
			if (match) { return configList[expandedConfigs[configPointer].pointerInConfigList].string }
		}
		return null
	}

	// a very generic isBindingsInList...
	bool isStrInList(char str[], String strList[]) {
		for (int pointer = 0; pointer < strList.arrayLength; pointer++) {
			if (str == strList[pointer].string) { return true }
		}
		return false
	}

	bool isBindingsInList(String bindings[]) {
		for (int listPointer = 0; listPointer < list.arrayLength; listPointer++) {
			if (bindings.arrayLength == list[listPointer].bindings.arrayLength) {
				bool match = true
				for (int bindPointer = 0; bindPointer < list[listPointer].bindings.arrayLength; bindPointer++) {
					if (bindings[bindPointer].string != list[listPointer].bindings[bindPointer].string) {
						match = false
						break
					}
				}
				if (match) { return true }
			}
		}
		return false
	}
}
