// InteractiveDistributor.dn
// A component that provides interactive access to percetion and assembly module 
//
// Author: Roberto Rodrigues Filho
// July @ 2018

const char debugMSG[] = "[@InteractiveDistributor]"

const char HELP[] 			 	 = "help"
const char GET_CONFIG[]		 	 = "get_config"
const char GET_ALL_CONFIGS[] 	 = "get_all_configs"
const char SET_CONFIG[]   	 	 = "set_config"
const char ADD_COMP[] 		 	 = "add_comp"
const char REMOVE_COMP[] 	 	 = "remove_comp"
const char GET_COMPONENTS[]	 	 = "get_components"
const char ADD_PROXY[]		 	 = "add_proxy"
const char REMOVE_PROXY[]	 	 = "remove_proxy"
const char GET_PROXIES[]	 	 = "get_proxies"
const char GET_PERCEPTION_DATA[] = "get_perception_data"
const char RUN[]	 	 		 = "run"
const char TEST_CURRENT[]	 	 = "test_current"
const char DISTRIBUTE[]		 	 = "distribute"
const char EXIT[] 			 	 = "exit"

component provides App requires io.Output out, data.IntUtil iu, io.Input in, data.StringUtil strUtil, 
	distributor.Distributor, util.RandomInt ran, time.Timer t, time.Calendar cal, 
	time.DateUtil dateUtil, data.json.JSONParser parser, data.DecUtil du, io.TextFile, util.ConfigFile {

	String configs[] = null
	Object obj = null
	Distributor distributor = null
	ProxyInfo infos[] = null
	TextFile oFile = null
	
	void help() {
		out.println("$(debugMSG) Command list:")
		out.println(" $(debugMSG) $(HELP) - to list all commands")
		out.println(" $(debugMSG) $(GET_CONFIG) show current config")
		out.println(" $(debugMSG) $(GET_ALL_CONFIGS) list all configs")
		out.println(" $(debugMSG) $(SET_CONFIG) a - set config to 'a'")
		out.println(" $(debugMSG) $(GET_PERCEPTION_DATA) - to get the metrics and events generated by the system")
		out.println(" $(debugMSG) $(RUN) cycles folder/file.data - run all configs for the number of cycles and save the data in file.data")
		out.println(" $(debugMSG) $(TEST_CURRENT) cycles folder/filename - run current configs for the number of cycles and save the data in \"filename_(arch number).data\"")
		out.println(" $(debugMSG) $(EXIT) - to finish execution")
	}

	void commandInterpret(char cmd[]) {
		String cmdList[] = strUtil.explode(cmd, " ")
		if (cmdList.arrayLength == 1) {
			if (cmd == HELP) {
				help()
			} else if (cmd == GET_CONFIG) {
				out.println("$(debugMSG) Current config: $(distributor.getConfig())")
			} else if (cmd == GET_ALL_CONFIGS) {
				String configsStr[] = distributor.getAllConfigs()
				for (int i = 0; i < configsStr.arrayLength; i++) {
					out.println("$(debugMSG) $(iu.intToString(i)) $(configsStr[i].string)")
				}
				out.println("$(debugMSG) $(iu.intToString(configsStr.arrayLength)) configs:")
			} else if (cmd == GET_COMPONENTS) {
				IDCReference comps[] = distributor.getComponents(new String[](new String("../metacom/monitoring/proxies/HTTPProxy.o")))
				if (comps.arrayLength > 0) {
					for (int i = 0; i < comps.arrayLength; i++) { out.println("$(debugMSG) $(comps[i].path)") }
				} else { out.println("$(debugMSG) No components!") }
			} else if (cmd == GET_PROXIES) {
				String proxies[] = distributor.getProxies()
				out.println("$(debugMSG) $(iu.intToString(proxies.arrayLength)) proxies:")
				for (int pointer = 0; pointer < proxies.arrayLength; pointer++) {
					out.println("$(debugMSG) $(proxies[pointer].string)")
				}
			} else if (cmd == GET_PERCEPTION_DATA) {
				oFile = null
				handlePerception(distributor.getPerceptionData())
			} else if (cmd == DISTRIBUTE) {
				//distribute()
				out.println("$(debugMSG) Distribute function call!")
			} else if (cmd == "testando") {
				/* collecting information from the running system */
				//distributor.getPerceptionData()
				//String distConfigs[] = distributor.getAllConfigs()
				//for (int j = 0; j < 10; j++) {
					//for (int i = 0; i < distConfigs.arrayLength; i++) {
						//distributor.setConfig(distConfigs[i].string)
						//t.sleep(5000)
						//handlePerception(distributor.getPerceptionData())
					//}					
				//}
			} else { out.println("$(debugMSG) Invalid command.") }
		} else if (cmdList.arrayLength == 2) {
			if (cmdList[0].string == SET_CONFIG) {
				String configsArray[] = distributor.getAllConfigs()
				int pointer = iu.intFromString(cmdList[1].string)
				distributor.setConfig(configsArray[pointer].string)
			} else if (cmdList[0].string == ADD_COMP) {
				distributor.addComp(new String[](new String(cmdList[1].string)))
			} else if (cmdList[0].string == REMOVE_COMP) {
				distributor.removeComp(new String[](new String(cmdList[1].string)))
			} else if (cmdList[0].string == REMOVE_PROXY) {
				distributor.removeProxy(strUtil.subString(cmd, (REMOVE_PROXY.arrayLength+1),
					(cmd.arrayLength-REMOVE_PROXY.arrayLength-1)))
			} else if (cmdList[0].string == ADD_PROXY) {
				distributor.addProxy(strUtil.subString(cmd, (ADD_PROXY.arrayLength+1),
					(cmd.arrayLength-ADD_PROXY.arrayLength-1)))
			} else { out.println("$(debugMSG) Invalid command.") }
		} else if (cmdList.arrayLength == 3) {
			if (cmdList[0].string == RUN) {
				out.println("Running starting...")
				int cycles = iu.intFromString(cmdList[1].string)
				int counter = 0
				distributor.getPerceptionData()
				String distConfigs[] = distributor.getAllConfigs()
				for (int i = 0; i < distConfigs.arrayLength; i++) {
					distributor.setConfig(distConfigs[i].string)
					oFile = new TextFile(new char[](cmdList[2].string, "_", iu.intToString(i), ".data"), File.WRITE)
					for (int j = 0; j < cycles; j++) {
						t.sleep(5000)
						char percData[] = distributor.getPerceptionData()
						/*out.println("$debugMSG $percData")
						handlePerception(percData)*/
						oFile.writeLine(percData)
					}
					oFile.close()
				}
			} else if (cmdList[0].string == TEST_CURRENT) {
				out.println("Running starting...")
				int cycles = iu.intFromString(cmdList[1].string)
				int counter = 0
				distributor.getPerceptionData()
				oFile = new TextFile(new char[](cmdList[2].string, ".data"), File.WRITE)
				for (int j = 0; j < cycles; j++) {
					t.sleep(5000)
					handlePerception(distributor.getPerceptionData())
				}
				oFile.close()
			} else { out.println("$(debugMSG) Invalid command.") }
		} else {
			out.println("$(debugMSG) Invalid command.")
		}
	}

	void handlePerception(char perceptionData[]) {
		JSONElement document = parser.parseDocument(perceptionData)
		JSONElement metricsJSON = parser.getValue(document, "metrics")
		if (metricsJSON != null) {
			for (int pointer = 0; pointer < metricsJSON.children.arrayLength; pointer++) {
				JSONElement childrenMetrics = metricsJSON.children[pointer]
				char name[] = parser.getValue(childrenMetrics, "name").value
				dec value = du.decFromString(parser.getValue(childrenMetrics, "value").value)
				int count = iu.intFromString(parser.getValue(childrenMetrics, "count").value)
				dec metricValue = value/count
				out.println("$(debugMSG) $(name) value: $(du.decToString(value)) | count: $(iu.intToString(count)) | avg: $(du.decToString(metricValue)) ")
				//out.println("$(du.decToString(metricValue))")
				if (oFile != null) { oFile.writeLine(new char[](du.decToString(metricValue))) }
			}
		}
		JSONElement eventsJSON = parser.getValue(document, "events")
		if (eventsJSON != null) {
			for (int pointer = 0; pointer < eventsJSON.children.arrayLength; pointer++) {
				JSONElement childrenMetrics = eventsJSON.children[pointer]
				dec eValue = du.decFromString(parser.getValue(childrenMetrics, "value").value)
				int eCount = iu.intFromString(parser.getValue(childrenMetrics, "count").value)
				char type[] = parser.getValue(childrenMetrics, "name").value
				out.println("$(debugMSG) eValue: $(du.decToString(eValue)) | eCount: $(iu.intToString(eCount)) | type: $(type)")
			}
		}
	}

	int App:main(AppParam params[]) {
		if (params.arrayLength < 2) {
			out.println("$(debugMSG) use: dana InteractiveDistributor app.main.Component.o server_population.config")
			return 1
		}
		ConfigFile configFile = new ConfigFile(params[1].string)
		char managerIP[] = configFile.getValue("manager")
		char ipsStrStr[] = configFile.getValue("ips")
		String ipsStr[] = strUtil.explode(ipsStrStr, ",")
		distributor = new Distributor(managerIP)
		distributor.setMain(params[0].string, null)
		if (ipsStr.arrayLength > 1) {
			String ips[] = new String[](new String(new char[](
			strUtil.trim(ipsStr[0].string), ":2021")))
			for (int i = 1; i < ipsStr.arrayLength; i++) {
				ips = new String[](ips, new String(strUtil.trim(ipsStr[i].string)))
			}
			distributor.setIpList(ips)	
		}
		distributor.addProxy("|../metacom/monitoring/proxies/HTTPProxy.o|*(*:http.handler.GET.HTTPGET[0]:*)|")
		char cmd[] = "start"
		while (cmd != "exit") {
			if (cmd != "start") { commandInterpret(cmd)	}
			out.print("distributor> ")
			cmd = in.readln()
		}
		return 0
	}
}
