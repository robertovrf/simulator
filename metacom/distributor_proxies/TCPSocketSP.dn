const char debugMSG[] = "[@TCPSocketSP]"

component provides distributor_proxies.Proxy requires io.Output out, data.IntUtil iu, data.BoolUtil bu, 
	net.TCPSocket, net.TCPServerSocket, oracle.Parser parser, data.StringUtil strUtil, oracle.Encoder encoder,
	time.Calendar ic, time.DateUtil dateUtil {
	
	TCPSocket originalRef
	ProxyInfo info
	bool serviceStatus
	TCPServerSocket host

	Response interpreter(Request request) {
		Response response = null
		if (request.functionName == "connect") {
			char address[] = request.params[0].value
			int port = iu.intFromString(request.params[1].value)
			bool returnValue = originalRef.connect(address, port)
			response = new Response()
			response.status = 1
			response.value = bu.boolToString(returnValue)
			return response
		} else if (request.functionName == "accept") {
			//TODO...
		} else if (request.functionName == "send") {
			byte content[] = request.params[0].value
			int returnValue = originalRef.send(content)
			response = new Response()
			response.status = 1
			response.value = iu.intToString(returnValue)
			return response
		} else if (request.functionName == "recv") {
			int length = iu.intFromString(request.params[0].value)
			byte returnValue[] = originalRef.recv(length)
			response = new Response()
			response.status = 1
			response.value = returnValue
			return response
		} else if (request.functionName == "disconnect") {
			// TODO...
		} else if (request.functionName == "getRemoteEndpoint") {
			// TODO...
		} else if (request.functionName == "getLocalEndpoint") {
			// TODO...
		}
		response.status = 2
		response.value = ""
		return response
	}

	void Proxy:setInfo(ProxyInfo pInfo[], char myAddr[]) {
		info = pInfo[0]
	}

	void Proxy:stop() {
		serviceStatus = false
		host.unbind()
	}

	void Proxy:setObject(Object o) {
		if (o hastype TCPSocket) {
			originalRef = o
		} else {
			throw new Exception("Type incompatibility!")
		}
	}

	Request parseRequest(char content[]) {
		String helper[] = strUtil.explode(content, "!")
		Request request = parser.jsonToData(helper[0].string, typeof(Request), null)
		Request newRequest = new Request()
		newRequest.numParams = request.numParams
		newRequest.functionName = request.functionName
		for (int i = 0; i < newRequest.numParams; i++) {
			newRequest.params = new Param[newRequest.numParams]()
			newRequest.params[i] = new Param()
			newRequest.params[i].value = encoder.decode(helper[i+1].string)
		}
		return newRequest
	}

	Request readRequest(TCPSocket s) {
		Request request = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			if (buf == "\r") {
				break
			}
			command = new char[](command, buf)
		}
		int sizeResponse = iu.intFromString(command)
		if (sizeResponse > 0) {
			command = s.recv(sizeResponse)
			request = parseRequest(strUtil.subString(command, 
								0, command.arrayLength-4))			
		}
		return request
	}

	void process(TCPSocket s) {
		Response response = new Response()
		Request request = readRequest(s)
		if (request == null) {
			response.status = 2
			response.value = null
		} else { response = interpreter(request) }
		char packet[] = new char[](parser.jsonFromData(response,null), "\r\r\r\r") 
		s.send(new char[](iu.intToString(packet.arrayLength), "\r", packet))
		s.disconnect()
	}

	void acceptRemoteConnections() {
		while (serviceStatus) {
			TCPSocket client = new TCPSocket()
			// this redundancy is an attempt to mitigate race conditions
			if (serviceStatus) {
				if (client.accept(host)) {
					asynch::process(client)
				}
			}
		}
	}

	void Proxy:start() {
		serviceStatus = true
		host = new TCPServerSocket()
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, info.port)) {
			out.println("Error: failed to bind master socket")
			return
		}
		asynch::acceptRemoteConnections()
	}
}
