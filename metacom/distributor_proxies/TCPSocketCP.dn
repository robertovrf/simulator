
component provides net.TCPSocket(distributor_proxies.Proxy) requires oracle.Oracle oracle, 
	oracle.Parser, net.TCPSocket, composition.RecursiveLoader loader, io.Output out, data.IntUtil iu,
	data.StringUtil strUtil, oracle.Encoder encoder, time.Calendar ic, time.DateUtil dateUtil {

	TCPSocket remoteObj
	ProxyInfo info
	Mutex bucketLock = new Mutex() 

	void Proxy:stop() { }
	void Proxy:setObject(Object o) { }
	void Proxy:start() { }
	void Proxy:setInfo(ProxyInfo pInfo[], char myAddr[]) {
		info = pInfo[0]
		remoteObj = new TCPSocket()
	}

	Response parseResponse(char content[]) {
		Parser parser = new Parser()
		Response response = parser.jsonToData(content, typeof(Response), null)
		return response
	}

	Response readResponse(TCPSocket s) {
		Response response = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			if (buf == "\r") {
				break
			}
			command = new char[](command, buf)
		}
		command = s.recv(iu.intFromString(command))
		response = parseResponse(strUtil.subString(command, 
				0, command.arrayLength-4))
		return response
	}

	Response makeRequest(char content[]) {
		Response resp = null
		if (remoteObj.connect(info.address, info.port)) {
			remoteObj.send(content)
			resp = readResponse(remoteObj)
			remoteObj.disconnect() 
		}
		return resp
	}

	Proxy[] startReferences(Reference refs[], ProxyInfo infos[]) {
		Proxy refProxies[] = null
		for (int i = 0; i < refs.arrayLength; i++) {
			Proxy proxy = new Proxy() from refs[i].proxySer
			proxy.setObject(refs[i].obj)
			proxy.setInfo(infos[i],"")
			refProxies = new Proxy[](refProxies, proxy)
		}
		for (int i = 0; i < refProxies.arrayLength; i++) {
			asynch::refProxies[i].start()	
		}
		return refProxies
	}

	int TCPSocket:send(byte content[]) {
		Parser parser = new Parser()
		Request request = new Request()
		int returnValue
		request.functionName = "send"
		request.numParams = 1
		char requestStr[] = parser.jsonFromData(request, null)
		char param[] = content
		char packet[] = new char[](requestStr, "!", encoder.encode(param), "\r\r\r\r")
		//original bit
		char biggerPacket[] = new char[](iu.intToString(packet.arrayLength), "\r", packet)
		Response response = makeRequest(biggerPacket)
		if (response.status == 1) {
			returnValue = iu.intFromString(response.value)
		} else {
			returnValue = 0
		}
		return returnValue
	}
	
	byte[] TCPSocket:recv(int length) {
		Parser parser = new Parser()
		Request request = new Request()
		byte returnValue[]
		request.functionName = "recv"
		request.numParams = 1
		char requestStr[] = parser.jsonFromData(request, null)
		char param[] = iu.intToString(length)
		char packet[] = new char[](requestStr, "!", encoder.encode(param), "\r\r\r\r")
		char biggerPacket[] = new char[](iu.intToString(packet.arrayLength), "\r", packet)
		Response response = makeRequest(biggerPacket)
		if (response.status == 1) { returnValue = response.value }
		else { returnValue = null }
		return returnValue
	}
	
	bool TCPSocket:accept(TCPServerSocket server) {
		//I GUESS I'll have to create a server object for the TCPServerSocket here...
		//TODO
		return false
	}
	
	bool TCPSocket:connect(char address[], int port) {
		//TODO
		return false
	}
	
	void TCPSocket:disconnect() {
		//TODO
	}
	
	NetworkEndpoint TCPSocket:getLocalEndpoint() {
		return null
	}
	
	NetworkEndpoint TCPSocket:getRemoteEndpoint() {
		NetworkEndpoint ha = new NetworkEndpoint()
		return ha
	}
}
