
//TODO: should this have a variation with the request handler? POOL OF THREADS and THREAD PER CLIENT
component provides distributor_proxies.Proxy:httpget requires io.Output out, data.IntUtil iu, net.TCPSocket,
	net.TCPServerSocket, http.handler.GET.HTTPGET, oracle.Parser parser, data.StringUtil strUtil,
	time.Calendar ic, time.DateUtil dateUtil  {

	TCPSocket originalRef
	ProxyInfo info
	bool serviceStatus
	TCPServerSocket host

	Response interpreter(Request request) {
		Response response = null
		if (request.functionName == "handleRequest") {
			HTTPMessage msg = parser.jsonToData(request.params[0].value, typeof(HTTPMessage), null)
			HTTPGET httpGET = new HTTPGET() 
			httpGET.handleRequest(msg)
			response = new Response()
			response.status = 1
			response.value = ""
			return response
		}
		response.status = 2
		response.value = ""
		return response
	}

	void Proxy:setInfo(ProxyInfo pInfo[], char myAddr[]) {
		info = pInfo[0]
	}

	void Proxy:stop() {
		serviceStatus = false
		host.unbind()
	}

	void Proxy:setObject(Object o) {
		if (o hastype TCPSocket) {
			originalRef = o
		} else {
			throw new Exception("Type incompatibility!")
		}
	}

	Request parseRequest(char content[]) {
		String helper[] = strUtil.explode(content, "!")
		Request request = parser.jsonToData(helper[0].string, typeof(Request), null)
		Request newRequest = new Request()
		newRequest.numParams = request.numParams
		newRequest.functionName = request.functionName
		for (int i = 0; i < newRequest.numParams; i++) {
			newRequest.params = new Param[newRequest.numParams]()
			newRequest.params[i] = new Param()
			newRequest.params[i].value = helper[i+1].string
		}
		return newRequest
	}

	Request readRequest(TCPSocket s) {
		Request request = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\r") && 
					(command[len-2] == "\r") && (command[len-1] == "\r")) {
					request = parseRequest(strUtil.subString(command, 
							0, command.arrayLength-4))
					break
				}
			}
		}
		if (request == null) { s.disconnect() }
		return request
	}

	void process(TCPSocket s) {
		Response response = new Response()
		Request request = readRequest(s)
		if (request == null) {
			response.status = 2
			response.value = null
		} else { response = interpreter(request) }
		char content[] = new char[](parser.jsonFromData(response,null), "\r\r\r\r")
		s.send(content)
		s.disconnect()
	}

	void Proxy:start() {
		serviceStatus = true
		host = new TCPServerSocket()
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, info.port)) {
			out.println("Error: failed to bind master socket")
			return
		}
		while (serviceStatus) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) {
				asynch::process(client)
			}
		}
	}
}
