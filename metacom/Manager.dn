/*
stateless class B implementation:
  when loading a system in the distributor, and the system has a component that requires class B
it has to ask the manager whether someone has already registered that interface or not
  in case someone has registered the interface under a namespace, the registering "person" is the 
only one able to change it, the others need to ask the manager when changing configuration what IP
or collection of IPs they need to use.

architectural description:
|classA[interface]:IP,classB[comp]:IP,classB[comp]:unknown|listcomps|relations| 
*/


// Manager.dn
// 
// This component implements the application that manages class B systems.
//
// Author: Roberto Rodrigues Filho
// February @ 2019

uses rest.RManager
uses distributor_proxies.Proxy

const char debugMSG[] = "[@Manager]"

const int PORT = 2008

// registered
data SysInfo {
	char ownerIP[]
	char nameSpace[]
	char remoteInterface[]
	ProxyInfo currentIPs[] // ips where the system is running
	ProxyInfo oldIPs[]
	String requiredIPS[] // ips of the machines that are using this system
	bool running
	bool sharedState
}

component provides App requires io.Output out, os.Run run, data.IntUtil iu,
	data.StringUtil strUtil, net.TCPSocket, net.TCPServerSocket,
	http.util.HTTPUtil httpUtil, data.json.JSONEncoder jsonEncoder, rest.RESLauncher {

	SysInfo registeredInfo[]

	// TODO: think a bit better on how this will work considering sharedState and non-sharedState...
	// NOTE: for a non-shared interface, anyone can register it multiple times. I feel like...
	String[] register(MngRequest request) {
		if (registeredInfo == null) {
			registeredInfo = new SysInfo[](registeredInfo, 
				new SysInfo(request.ownerIP,
					request.nameSpace,
					request.remoteInterface,
					null,
					null,
					null,
					false,
					request.sharedState))
			out.println(new char[]("$(debugMSG) Interface",
				" $(request.remoteInterface) registered by $(request.ownerIP)."))
			return new String[](new String(RManager.OK_STATUS), 
				new String(RManager.JUST_REGISTERED))
		} else {
			for (int i = 0; i < registeredInfo.arrayLength; i++) {
				if ((request.nameSpace == registeredInfo[i].nameSpace) 
					&& (request.remoteInterface == registeredInfo[i].remoteInterface)) {
					return new String[](new String(RManager.OK_STATUS), 
						new String(RManager.ALREADY_REGISTERED))
				}
			}
			/* after looping through the entire registeredInfo array I add the interface */
			registeredInfo = new SysInfo[](registeredInfo, 
				new SysInfo(request.ownerIP,
					request.nameSpace,
					request.remoteInterface,
					null,
					null,
					null,
					false,
					request.sharedState))
			out.println(new char[]("$(debugMSG) Interface",
				" $(request.remoteInterface) registered by $(request.ownerIP)."))
			return new String[](new String(RManager.OK_STATUS), 
				new String(RManager.JUST_REGISTERED))
		}
		return new String[](new String(RManager.BADREQUEST_STATUS))
	}

	// TODO: for the shared state I will need to send message to the distributor telling 
	// it that the composition needs to be changed
	// TODO: currently the computer who request to change will shut down the old running services
	// However, this needs to be taken into account by the Distributor
	//TODO: maybe this method should be named "initiate instances -- or simply start"
	String[] change(MngRequest request) {
		for (int i = 0; i < registeredInfo.arrayLength; i++) {
			if ((request.nameSpace == registeredInfo[i].nameSpace) 
				&& (request.remoteInterface == registeredInfo[i].remoteInterface)
				&& (!registeredInfo[i].sharedState)) {
				ProxyInfo pInfos[] = null
				for (int j = 0; j < request.currentIPs.arrayLength; j++) {
					RESLauncher resl = new RESLauncher(request.currentIPs[j].string,
						RESLauncher.ESLAUNCHER_PORT)
					StartInfo startInfo 	= new StartInfo()
					startInfo.className 	= RESLauncher.CLASS_B
					startInfo.appName 		= "EmergentSys"
					//TODO: the root component for the interface needs to be given somehow
					// or this cannot be hard-coded -- rethink!
					// the name of the entrypoint needs to follow some sort of standard
					// following its interface name? I don't know...
					if (request.remoteInterface == "memcached.handler.EPMemcached") {
						startInfo.startCommand 	= "../repository/Memcached.o"
					} else { startInfo.startCommand 	= "../repository/TCPNetwork.o" }
					startInfo.ip 			= request.currentIPs[j].string
					AppStarted appStarted 	= resl.start(startInfo)
					// launch the EmergentSys and get its port address
					// and get the proxy address ass well for each of the ips in infos
					out.println(new char[]("$(debugMSG) IP of ES that had just been started: ",
						"$(appStarted.ip):$(iu.intToString(appStarted.port))"))
					pInfos = new ProxyInfo[](pInfos, new ProxyInfo(appStarted.ip,
						appStarted.port))
				}
				if (registeredInfo[i].currentIPs == null) { registeredInfo[i].oldIPs = pInfos }
				else { registeredInfo[i].oldIPs = registeredInfo[i].currentIPs }
				out.println("Old IPS:")
				for (int j = 0; j < registeredInfo[i].oldIPs.arrayLength; j++) {
					out.println(new char[]("$(registeredInfo[i].oldIPs[j].address)",
						":$(iu.intToString(registeredInfo[i].oldIPs[j].port))"))
				}
				registeredInfo[i].currentIPs = pInfos
				registeredInfo[i].running 	 = true
				return new String[](new String(RManager.OK_STATUS),
					new String(jsonEncoder.jsonFromArray(pInfos, null)))
			}
		}
		return new String[](new String(RManager.BADREQUEST_STATUS))
	}

	//TODO: this only works for the non-shared state
	String[] terminate(MngRequest request) {
		for (int i = 0; i < registeredInfo.arrayLength; i++) {
			if ((request.ownerIP == registeredInfo[i].ownerIP)
				&&(request.nameSpace == registeredInfo[i].nameSpace)
				&& (request.remoteInterface == registeredInfo[i].remoteInterface)
				&& (!registeredInfo[i].sharedState)
				&& (registeredInfo[i].running)) {
				for (int j = 0; j < registeredInfo[i].oldIPs.arrayLength; j++) {
					RESLauncher resl = new RESLauncher(
						registeredInfo[i].oldIPs[j].address,
						RESLauncher.ESLAUNCHER_PORT)
					AppInfo appInfo = new AppInfo()
					appInfo.className = RESLauncher.CLASS_B
					appInfo.appName = "EmergentSys"
					appInfo.ip = registeredInfo[i].oldIPs[j].address
					// I'll need to get the port somehow
					appInfo.portProxy = registeredInfo[i].oldIPs[j].port
					out.println(new char[]("$(debugMSG) termianteClassB ip:", 
						" $(appInfo.ip):$(iu.intToString(appInfo.portProxy))."))
					if (!resl.finish(appInfo)) {
						throw new Exception(new char[]("Something went wrong when",
						 " attempting to terminate the remote processes."))
					}
				}
				if (isSame(registeredInfo[i].oldIPs, registeredInfo[i].currentIPs)) {
					registeredInfo[i].oldIPs = null
					registeredInfo[i].currentIPs = null
					registeredInfo[i].running = false
					out.println("Class B fully terminated")
				} else { registeredInfo[i].oldIPs = registeredInfo[i].currentIPs }
				return new String[](new String(RManager.OK_STATUS))
			}
		}
		return new String[](new String(RManager.BADREQUEST_STATUS))		
	}

	bool isSame(ProxyInfo a[], ProxyInfo b[]) {
		if (a.arrayLength != b.arrayLength) { return false }
		for (int i = 0; i < a.arrayLength; i++) {
			if ((a[i].address != b[i].address)
				|| (a[i].port != b[i].port)) {
				return false
			}
		}
		return true
	}

	// TODO: not sure why I have created this method... ):
	String[] getIPs(MngRequest request) {
		for (int i = 0; i < registeredInfo.arrayLength; i++) {
			if ((registeredInfo[i].remoteInterface == request.remoteInterface) 
				&& (registeredInfo[i].nameSpace == request.nameSpace)) {
				return new String[](new String(RManager.OK_STATUS), 
					new String(jsonEncoder.jsonFromData(registeredInfo[i], null)))
			}
		}
		return new String[](new String(RManager.BADREQUEST_STATUS))
	}

	String[] parseCommand(HTTPMessage msg) {
		if (msg.command == "POST") {
			if (msg.resource == RManager.REGISTER) { return register(jsonEncoder.jsonToData(msg.postData, 
				typeof(MngRequest), null)) }
			else if (msg.resource == RManager.CHANGE) { return change(jsonEncoder.jsonToData(msg.postData, 
				typeof(MngRequest), null)) }
			else if (msg.resource == RManager.TERMINATE) { return terminate(jsonEncoder.jsonToData(msg.postData,
				typeof(MngRequest), null)) }
			else if (msg.resource == RManager.GET_IPS) { return getIPs(jsonEncoder.jsonToData(msg.postData,
				typeof(MngRequest), null)) }
		}
		return new String[](new String(RManager.BADREQUEST_STATUS))
	}

	HTTPMessage readRequest(TCPSocket client) {
		HTTPMessage msg = clone httpUtil.readHTTPRequest(client)
		/* removes the htdocs path + /meta/ */
		int start = HTTPUtil.htdocs.arrayLength + 6 // 6 = {/meta/}.arrayLength
		if (msg.resource.arrayLength > start) {
			int length = msg.resource.arrayLength - start
			msg.resource = strUtil.subString(msg.resource, start, length)	
		}
		return msg
	}

	char[] formatHTTPResponse(String response[]) {
		char resp[] = null
		if (response.arrayLength > 0) {	resp = new char[]("HTTP/1.0 ", response[0].string, " \r\n")	}
		else { resp = new char[]("HTTP/1.0 ", RManager.BADREQUEST_STATUS, " \r\n") }
		resp = new char[] (resp, "Server: ESLauncher v1\r\n", "Content-Encoding: binary\r\n")
		if (response.arrayLength > 1) {
			resp = new char[](resp, "Content-Length: $(iu.intToString(response[1].string.arrayLength))\r\n")
		} else { resp = new char[](resp, "Content-Length: $(iu.intToString(0))\r\n") }
		resp = new char[](resp, "Content-Type: text/json\r\n", "Access-Control-Allow-Origin: *\r\n","\r\n")
		if (response.arrayLength > 1) { resp = new char[](resp, response[1].string) }
		return resp
	}

	void sendResponse(TCPSocket client, char msg[]) {
		client.send(msg)
		client.disconnect()
	}

	void executor(TCPSocket client) {
		sendResponse(client, formatHTTPResponse(parseCommand(readRequest(client))))
	}

	void serverStart() {
		TCPServerSocket host = new TCPServerSocket()
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, RManager.RMANAGER_PORT)) {
			out.println("Error: failed to bind master socket")
			return
		}
		while (true) {
			TCPSocket client = new TCPSocket()
			out.println("$(debugMSG) Waiting for new requests...")
			if (client.accept(host)) { asynch::executor(client)	}
			out.println("$(debugMSG) Triggered thread to handle request.")
		}
	}

	int App:main(AppParam params[]) {
		out.println("$(debugMSG) Manager class B!")
		serverStart()
		return 0
	}
}
