// Client
// Wikipedia client.
//
// This script is split with requests with 31% scripts, 52% images, 17% HTML
//
// Author: Roberto Rodrigues Filho
// July @ 2019

const char debugMSG[] = "[@Client]"

/* update wikipedia ratio */
// meaning that the paper was just a baseline
// we focused on the main type of files and mantained the ratio for them
/*
	31% scripts (static)
	52% images (static)
	17% html (dynamic)
*/
const int NUM_REQUESTS = 10 // simultaneous requests
const char SERVER_ADDRESS[] = "http://scc-mc1.lancs.ac.uk:2012/"
const char APP[] = "danapedia/"
const char SCRIPT[] = "css/reset.css"
const char HTML[] = "action_page.dn?page=view&id=1"
const char IMAGE[] = "imgs/page-not-found.gif"
const char THUMB[] = "image-10b.jpg"

component provides App requires io.Output out, data.IntUtil iu, time.Timer t,
	net.http.HTTPRequest http, time.Calendar calendar, time.DateUtil dateUtil {

	int NUM_IMAGES = (NUM_REQUESTS*52)/100
	int NUM_SCRIPTS = (NUM_REQUESTS*31)/100
	int NUM_HTML =  ((NUM_REQUESTS*17)/100) + 1

	Mutex numReqLock = new Mutex()
	Mutex finishedReqLock = new Mutex()
	int actualNumRequest = 0
	int finishedRequests = 0

	void watcher() {
		while(true) {
			t.sleep(1000)
			out.println("Requests: $(iu.intToString(actualNumRequest)) - $(iu.intToString(finishedRequests))")
			mutex(numReqLock) { actualNumRequest = 0 }
			mutex(finishedReqLock) { finishedRequests = 0 }
		}
	}

	void reqInc() {
		mutex(finishedReqLock) { finishedRequests++ }
	}

	void requests(int requestID) {
		mutex(numReqLock) { actualNumRequest++ }
		if (requestID < NUM_IMAGES) {
			//http.get(new char[](SERVER_ADDRESS, APP, IMAGE), null)
			out.println("requisicao thumb")
			http.get(new char[](SERVER_ADDRESS, THUMB), null)
			out.println("completada thumb")
		} else if ((NUM_IMAGES <= requestID) && (requestID < (NUM_IMAGES+NUM_SCRIPTS))) {
			out.println("requisicao script")
			http.get(new char[](SERVER_ADDRESS, APP, SCRIPT), null)
			out.println("completada script")
		} else if (((NUM_IMAGES+NUM_SCRIPTS) <= requestID) && 
			(requestID < (NUM_IMAGES+NUM_SCRIPTS+NUM_HTML))) {
			out.println("requisicao html")
			http.get(new char[](SERVER_ADDRESS, APP, HTML), null)
			out.println("completada html")
		} else { out.println("$(debugMSG) ERROR!") }
		reqInc()
	}

	int App:main(AppParam param[]) {
		Thread threads[] = new Thread[NUM_REQUESTS]
		//asynch::watcher()
		while(true) {
			out.println("Issuing requests!")
			DateTime start = calendar.getTime()
			for (int i = 0; i < NUM_REQUESTS; i++) { threads[i] = asynch::requests(i) }
			for (int i = 0; i < NUM_REQUESTS; i++) { threads[i].join() }
			DateTime end = calendar.getTime()
			DateTime diff = dateUtil.diff(start, end)
			out.println("$(debugMSG) $(iu.intToString(dateUtil.toMilliseconds(diff)))")
		}
		return 0
	}
}


